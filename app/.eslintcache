[{"/home/chloe/ESILV/python/app/src/App.js":"1","/home/chloe/ESILV/python/app/src/constants/colors.js":"2","/home/chloe/ESILV/python/app/src/constants/consts.js":"3","/home/chloe/ESILV/python/app/src/reportWebVitals.js":"4","/home/chloe/ESILV/python/app/src/index.js":"5","/home/chloe/ESILV/python/app/src/components/NumberBox.js":"6","/home/chloe/ESILV/python/app/src/components/Result.js":"7","/home/chloe/ESILV/python/app/src/components/Model.js":"8"},{"size":11480,"mtime":1608104101722,"results":"9","hashOfConfig":"10"},{"size":232,"mtime":1607797934947,"results":"11","hashOfConfig":"10"},{"size":507,"mtime":1607813808658,"results":"12","hashOfConfig":"10"},{"size":362,"mtime":1607796072537,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1607796072537,"results":"14","hashOfConfig":"10"},{"size":461,"mtime":1608104124393,"results":"15","hashOfConfig":"10"},{"size":2819,"mtime":1608104113869,"results":"16","hashOfConfig":"10"},{"size":703,"mtime":1608104459373,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"300jqe",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"21"},"/home/chloe/ESILV/python/app/src/App.js",["39","40","41"],"import React, { useState } from 'react';\nimport './App.css';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport PropTypes from 'prop-types';\nimport Tabs from '@material-ui/core/Tabs';\nimport { Tab, Grid, FormControlLabel, Switch, Box } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport logo from './assets/images/logoesilv.png';\nimport * as Constants from './constants/consts';\nimport SwipeableViews from 'react-swipeable-views';\nimport NumberBox from './components/NumberBox';\n//ml models\nimport Model from './components/Model';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  // form values\n  const [state, setState] = useState({\n    administrative: 0,\n    administrativeDuration: 0,\n    informational: 0,\n    informationalDuration: 0,\n    productRelated: 0,\n    productRelatedDuration: 0,\n    bounceRates: 0,\n    exitRates: 0,\n    pageValues: 0,\n    region: 0,\n    os: 0,\n    browser: 0,\n    trafficType: 0,\n    specialDay: false,\n    alreadyVisit: false,\n    weekend: false,\n  });\n\n  // tab panel\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role='tabpanel'\n        hidden={value !== index}\n        id={`full-width-tabpanel-${index}`}\n        aria-labelledby={`full-width-tab-${index}`}\n        {...other}\n      >\n        {value === 0 && <Model states={state} model='logisticRegression' />}\n        {value === 1 && <Model states={state} model='naiveBayes' />}\n        {value === 2 && <Model states={state} model='randomForest' />}\n        {value === 3 && <Model states={state} model='extraTree' />}\n        {value === 4 && <Model states={state} model='neuralNetwork' />}\n      </div>\n    );\n  }\n\n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n\n  function a11yProps(index) {\n    return {\n      id: `full-width-tab-${index}`,\n      'aria-controls': `full-width-tabpanel-${index}`,\n    };\n  }\n\n  // for tab\n  const classesMainBar = Constants.mainBar();\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n\n  const handleChangeField = (event) => {\n    setState({ ...state, [event.target.name]: Number(event.target.value) });\n  };\n  const handleChangeSwitch = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div className='App'>\n      <AppBar position='static'>\n        <Toolbar style={{ backgroundColor: 'rgb(207, 16, 83)' }}>\n          <img src={logo} style={{ height: 60 }} />\n\n          <Typography\n            variant='h6'\n            className={classesMainBar.title}\n            style={{ fontWeight: 'bold' }}\n          >\n            PYTHON PROJECT\n          </Typography>\n          <Typography>By Chlo√© </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <div\n        className={classes.root}\n        style={{\n          marginLeft: 150,\n          marginRight: 150,\n        }}\n      >\n        <Typography\n          variant='h6'\n          className={classesMainBar.title}\n          style={{ fontWeight: 'bold', margin: 50 }}\n        >\n          REAL TIME ONLINE SHOPPER INTENTION PREDICTION\n        </Typography>\n        <div style={{ padding: 40 }}>\n          <Box\n            boxShadow={15}\n            bgcolor='background.paper'\n            m={1}\n            p={1}\n            style={{\n              width: '8rem',\n              height: '5rem',\n              width: '100%',\n              height: '80%',\n            }}\n          >\n            <Grid container spacing={3}>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Administrative'\n                  helper='Number of administrative pages the user visisted'\n                  name='administrative'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Administrative Duration'\n                  helper='Amount of time spent on administrative pages'\n                  name='administrativeDuration'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Informational'\n                  helper='Number of informational pages the user visisted'\n                  name='informational'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Informational Duration'\n                  helper='Amount of time spent on informational pages'\n                  name='informationalDuration'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Product Related'\n                  helper='Number of product related pages the user visisted'\n                  name='productRelated'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Product Related Duration'\n                  helper='Amount of time spent on product related pages'\n                  name='productRelatedDuration'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Bounce Rates'\n                  helper='Percentage of visitors who enter the site from that page and then left'\n                  min={0}\n                  max={100}\n                  name='bounceRates'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Exit Rates'\n                  helper='Percentage of visitors who left the site from a this page'\n                  min={0}\n                  max={100}\n                  name='exitRates'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Page Values'\n                  helper='Average value for a web page that a user visited before completing a transaction'\n                  name='pageValues'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Region'\n                  helper='Region number of user at time of transaction'\n                  min={1}\n                  max={9}\n                  name='region'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Operating Systems'\n                  helper='Operating Systems used'\n                  min={1}\n                  max={5}\n                  name='os'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Browser'\n                  helper='Browser used'\n                  min={1}\n                  max={13}\n                  name='browser'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item xs={3}>\n                <NumberBox\n                  label='Traffic Type'\n                  helper='Number of traffic type'\n                  min={1}\n                  max={20}\n                  name='trafficType'\n                  onChangeProp={handleChangeField}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <FormControlLabel\n                  value='start'\n                  control={\n                    <Switch\n                      color='primary'\n                      onChange={handleChangeSwitch}\n                      name='specifalDay'\n                      checked={state.specifalDay}\n                    />\n                  }\n                  label='Was the transaction made on a special day'\n                  labelPlacement='start'\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <FormControlLabel\n                  value='start'\n                  control={\n                    <Switch\n                      color='primary'\n                      onChange={handleChangeSwitch}\n                      name='alreadyVisit'\n                      checked={state.alreadyVisit}\n                    />\n                  }\n                  label='Did the user already visit this page'\n                  labelPlacement='start'\n                  onChangeProp={handleChangeSwitch}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <FormControlLabel\n                  value='start'\n                  control={\n                    <Switch\n                      color='primary'\n                      onChange={handleChangeSwitch}\n                      name='weekend'\n                      checked={state.weekend}\n                    />\n                  }\n                  label='Was the transaction made on a weekend'\n                  labelPlacement='start'\n                  onChangeProp={handleChangeSwitch}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </div>\n      </div>\n\n      <div style={{ marginTop: 100 }}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor='primary'\n          textColor='primary'\n          variant='fullWidth'\n          aria-label='full width tabs example'\n          style={{ margin: 150, marginTop: 50 }}\n        >\n          <Tab label='Logistic Regression' {...a11yProps(0)} />\n          <Tab label='Naive Bayes' {...a11yProps(1)} />\n          <Tab label='Random Forest' {...a11yProps(2)} />\n          <Tab label='Extra Tree' {...a11yProps(3)} />\n          <Tab label='Neural Networks' {...a11yProps(4)} />\n        </Tabs>\n        <SwipeableViews\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n          index={value}\n          onChangeIndex={handleChangeIndex}\n        >\n          <TabPanel value={value} index={0} dir={theme.direction}></TabPanel>\n          <TabPanel value={value} index={1} dir={theme.direction}></TabPanel>\n          <TabPanel value={value} index={2} dir={theme.direction}></TabPanel>\n          <TabPanel value={value} index={3} dir={theme.direction}></TabPanel>\n          <TabPanel value={value} index={4} dir={theme.direction}></TabPanel>\n        </SwipeableViews>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n\n\n*/\n",["42","43"],"/home/chloe/ESILV/python/app/src/constants/colors.js",[],"/home/chloe/ESILV/python/app/src/constants/consts.js",["44"],"import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport colors from './colors';\n\nexport const mainBar = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport const switchButton = makeStyles({\n  switchBase: {\n    color: colors[3],\n    '&$checked': {\n      color: colors[0],\n    },\n    '&$checked + $track': {\n      backgroundColor: colors[5],\n    },\n  },\n  checked: {},\n  track: {},\n});\n","/home/chloe/ESILV/python/app/src/reportWebVitals.js",[],"/home/chloe/ESILV/python/app/src/index.js",[],"/home/chloe/ESILV/python/app/src/components/NumberBox.js",[],"/home/chloe/ESILV/python/app/src/components/Result.js",["45"],"import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport '../App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst Result = (props) => {\n  const classes = useStyles();\n  const prediction = props.prediction;\n  let result;\n  console.log('HERE ARE THE RESULTS : ', prediction);\n  console.log('ACCURACY : ', props.accuracy);\n  if (prediction == 0) {\n    result = (\n      <Typography style={{ color: 'white', paddingLeft: 30, fontSize: 30 }}>\n        No\n      </Typography>\n    );\n  } else {\n    result = (\n      <Typography style={{ color: 'white', paddingLeft: 30, fontSize: 30 }}>\n        Yes\n      </Typography>\n    );\n  }\n  return (\n    <div\n      className={classes.root}\n      style={{\n        marginBottom: 100,\n        marginLeft: 500,\n        marginRight: 500,\n        marginTop: 15,\n      }}\n    >\n      <Grid container spacing={3}>\n        <Grid\n          item\n          xs={12}\n          style={{\n            backgroundColor: 'rgb(207, 16, 83)',\n            borderRadius: 20,\n          }}\n        >\n          <Grid container spacing={3}>\n            <Grid item xs={6} style={{ textAlign: 'left' }}>\n              <Typography style={{ color: 'white', paddingLeft: 30 }}>\n                The shopper has the intention of buying a product?\n              </Typography>\n            </Grid>\n            <Grid item xs={6} style={{ textAlign: 'center' }}>\n              <Typography\n                style={{ color: 'white', paddingLeft: 30, fontSize: 30 }}\n              >\n                {result}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          style={{\n            borderColor: 'rgb(207, 16, 83)',\n            border: '3px solid rgb(207, 16, 83)',\n            borderRadius: 20,\n            marginTop: 10,\n          }}\n        >\n          <Grid container spacing={3}>\n            <Grid item xs={6} style={{ textAlign: 'left' }}>\n              <Typography\n                style={{ color: 'rgb(207, 16, 83)', paddingLeft: 30 }}\n              >\n                Accuracy\n              </Typography>\n            </Grid>\n            <Grid item xs={6} style={{ textAlign: 'center' }}>\n              <Typography\n                style={{\n                  color: 'rgb(207,16,83)',\n                  paddingLeft: 30,\n                  fontSize: 20,\n                }}\n              >\n                {props.accuracy} %\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Result;\n","/home/chloe/ESILV/python/app/src/components/Model.js",["46"],"import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport axios from 'axios';\nimport Result from './Result';\n\nconst Model = (props) => {\n  const [prediction, setPrediction] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  let link = 'http://localhost:5000/' + props.model;\n  useEffect(() => {\n    axios\n      .post(link, props.states)\n      .then(function (res) {\n        setPrediction(Number(res.data.result));\n        setAccuracy(Number(res.data.accuracy));\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }, []);\n\n  console.log(props.states);\n  return <Result prediction={prediction} accuracy={accuracy} />;\n};\n\nexport default Model;\n",{"ruleId":"47","severity":1,"message":"48","line":108,"column":11,"nodeType":"49","endLine":108,"endColumn":52},{"ruleId":"50","severity":1,"message":"51","line":144,"column":15,"nodeType":"52","messageId":"53","endLine":144,"endColumn":20},{"ruleId":"50","severity":1,"message":"54","line":145,"column":15,"nodeType":"52","messageId":"53","endLine":145,"endColumn":21},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":22,"nodeType":"61","messageId":"62","endLine":1,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":24,"column":18,"nodeType":"65","messageId":"53","endLine":24,"endColumn":20},{"ruleId":"66","severity":1,"message":"67","line":20,"column":6,"nodeType":"68","endLine":20,"endColumn":8,"suggestions":"69"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","unexpected","Duplicate key 'height'.","no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'link' and 'props.states'. Either include them or remove the dependency array.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [link, props.states]",{"range":"75","text":"76"},[577,579],"[link, props.states]"]